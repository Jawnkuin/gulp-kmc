'use strict';
var through = require('through2'),
    gutil = require('gulp-util'),
    fs = require('fs'),
    path = require('path'),
	kmd = require('k2cmd');


var depMap = {},
    writeTimer = null;

function writeDepFile(filePath){
    var code ="/*generated by KMD*/\nKISSY.config('modules'," + JSON.stringify(depMap,null,4) +');'
    fs.writeFile(filePath,code);
    fs.writeFile(filePath.replace(/\.js$/,"-min.js"),kmd.minify(code));
    depMap = {};
    gutil.log('combined dependency file ' + filePath + ' is created.');
}

module.exports ={
    config: kmd.config,
    cmd2k: function(opt) {

	    function k2cmd(file, encoding, callback) {
            /*jshint validthis:true */

            if (file.isNull()) {
                this.push(file);
                return callback();
            }

            if (file.isStream()) {
                return callback(uglifyError('Streaming not supported', {
                    fileName: file.path,
                    showStack: false
                }));
            }

            var ignore = false;
            if(opt.exclude) {
                ignore = opt.exclude.some(function(item) {
                    return file.path.indexOf(item) > -1;
                });
            }

            if(ignore) {
                this.push(file);
                callback();
                return;
            }


            var r = kmd.cmd2kissy2(file.contents.toString(), {filePath:file.path,fromFile:false}),
                info = r.parser;

            if(opt.depFilePath) {
                if(info.requires.length && !depMap[info.moduleName]) {
                    depMap[info.moduleName] = { requires: info.requires };
                }

                if(writeTimer) {
                    clearTimeout(writeTimer);
                }
                writeTimer =setTimeout(function() {
                    writeDepFile(opt.depFilePath);
                },1000);
            }

            try {
                file.contents = new Buffer(r.code);
            } catch (e) {
                return callback({
                    fileName: file.path,
                    lineNumber: e.line,
                    stack: e.stack,
                    showStack: false
                });
            }



            this.push(file);

            callback();
        }

	    return through.obj(k2cmd);
    },
    combo: function(opt) {

       var combined = {};

       function matched(_file) {
            var combinedFile = [];
            if(combined[_file.path]) {
                return combinedFile;
            }

            if(opt && opt.files && opt.files.length) {
                opt.files.forEach(function(file){
                    if(path.resolve(file.src) == _file.path){
                       combined[_file.path] = true;
                       var result = kmd.combo(_file.contents.toString(),null,{fromFile:false,filePath:_file.path,minify:opt});
                       var base = path.dirname(file.dest);

                       if(opt.minify) {
                         var ext = opt.ext;
                         if(! (ext && ext!== ".js")) {
                             ext = "-min.js";
                         }
                         combinedFile.push(new gutil.File({
                                           base:base,
                                           path: file.dest.replace(/\.js$/,ext),
                                           contents: new Buffer(result.minifyCode)
                                         }));
                       }
                        combinedFile.push(new gutil.File({
                                           base:base,
                                           path: file.dest,
                                           contents: new Buffer(result.sourceCode)
                                         }));




                       return false;
                    }
                });
            }

            return combinedFile;
       }

       return through.obj(function (file, encoding, callback) {

            if (file.isNull()) {
                this.push(file);
                return callback();
            }

            if (file.isStream()) {
                return callback(uglifyError('Streaming not supported', {
                    fileName: file.path,
                    showStack: false
                }));
            }


            var combinedFile = matched(file),
                self = this;
            if(combinedFile.length) {
                combinedFile.forEach(function(item) {
                    self.push(item);
                });
            }

            this.push(file);

            callback();
        });
    }
}


