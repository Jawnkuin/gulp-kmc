'use strict';
var through = require('through'),
    gutil = require('gulp-util'),
    PluginError = gutil.PluginError,
    fs = require('fs'),
    path = require('path'),
    minimatch = require("minimatch"),
	kmd = require("kmd");

var pathSeparatorRe = /[\/\\]/g;

var depMap = {},
    realDepMap = {},
    options = {},
    writeTimer = null;


function parseExt(ext) {
    var _ext = {};

    if(!ext) {
        _ext = kmd.config("ext") || {
            min:"-min.js",
            src:".js"
        };
    }else if(typeof ext == "string") {
        _ext = {
            min:ext,
            src:".js"
        }
    }else {
        _ext = {
            min:ext.min||"-min.js",
            src:ext.src||".js"
        }
    }
    return _ext;
}


function writeDepFile(filePath){
    var depFilePath = kmd.config("depFilePath");

    if(depFilePath){
        filePath = depFilePath;
    }
    if(!fs.existsSync(path.dirname(filePath))) {
        fs.mkdirSync(path.dirname(filePath));
    }
    var code ="/*generated by KMD*/\nKISSY.config('modules'," + JSON.stringify(depMap,null,4) +');'
    fs.writeFileSync(filePath,code);
    fs.writeFileSync(filePath.replace(/\.js$/,"-min.js"),kmd.minify(code));
    gutil.log('combined dependency file ' + gutil.colors.green(filePath) + ' is created.');
}

module.exports ={
    config: kmd.config,
    convert: function(opt) {
        var buffer = [],
            ext = parseExt(opt.ext);

        options["cmd2k"] =opt||{};

	    function k2cmd(file) {

            /*jshint validthis:true */
            if (file.isNull()) {
                return;
            }

            if (file.isStream()) {
                return this.emit('error', new PluginError('gulp-kmc',  'Streaming not supported'));
            }

            var ignore = false;

            if(opt.exclude) {
                ignore = opt.exclude.some(function(item) {
                    return path.dirname(file.path).split(pathSeparatorRe).some(function(pathName) {
                        return minimatch(pathName, item);
                    });
                });
            }

            if(!ignore && opt.ignoreFiles) {
                ignore = opt.ignoreFiles.some(function(item) {
                    return minimatch(path.basename(file.path), item);
                });
            }

            if(ignore) {
                buffer.push(file);
                return;
            }

            file.realPath = file.path;
            var r = kmd.convert(file.contents.toString(), {
                                            filePath:file.path,
                                            fixModuleName:opt.fixModuleName || kmd.config("fixModuleName")
                                        });


            if(r.dependencies.length && !depMap[r.moduleInfo.moduleName]) {
                var requires = [],realRequires = [];
                r.dependencies.forEach(function(dep) {
                    requires.push(dep);
                    realRequires.push(dep);
                });
                realDepMap[r.moduleInfo.moduleName] = { requires: realRequires };
                depMap[r.moduleInfo.moduleName] = { requires: requires };
            }

            if(opt.minify) {
                buffer.push(new gutil.File({
                    contents:new Buffer(r.minify),
                    path:file.path.replace(/\.js$/, ext.min),
                    base:file.base
                }));
            }
            file.path = file.path.replace(/\.js$/,ext.src);
            file.contents = new Buffer(r.source);
            buffer.push(file);

        }

        function endStream() {
            if (buffer.length === 0) return this.emit('end');
            var self = this;
            buffer.forEach(function(file){
                self.push(file);
            });

            if(opt.depFilePath) {
                writeDepFile(opt.depFilePath);
            }
            this.emit('end');

        }

	    return through(k2cmd, endStream);
    },

    combo: function(opt) {

       var combined = {},
           ext = parseExt(opt.ext),
           config = null;

       var buffer = [];

       options["combo"] =opt||{};

       function combo(_file, callback) {
            var combinedFile = [];

            if(combined[_file.path]) {
                return combinedFile;
            }

            if(opt && opt.files && opt.files.length) {
                opt.files.forEach(function(file){
                    if(path.resolve(file.src) == _file.path){

                       var info = kmd.combo(_file.path);

                       buffer.push(new gutil.File({
                           base:path.dirname(file.dest),
                           path:file.dest.replace(/\.js$/,ext.src),
                           contents: new Buffer(info.source.join("\n"))
                       }));

                       if(opt.minify) {
                            buffer.push(new gutil.File({
                               base:path.dirname(file.dest),
                               path:file.dest.replace(/\.js$/,ext.min),
                               contents: new Buffer(info.minify.join(""))
                            }));
                       }

                       gutil.log('combined  file ' + gutil.colors.green(file.dest) + ' is created.');

//                       "/*\ncombined files by KMD:\n" + modsName.join("\n")+"\n*/\n";
//                       combined[_file.path] = {
//                          files:[],
//                          contents:[],
//                          dest:file.dest
//                       };

                    }
                });
            }
       }

       function endStream() {
           if (buffer.length === 0) return this.emit('end');
           var self = this;

           var minifyFile = {};
           buffer.forEach(function(file){
               self.push(file);

               for(var f in combined){
                  var comboInfo = combined[f],
                      index = comboInfo.files.indexOf(file.realPath);

                  if(index > -1) {
                     comboInfo.contents.push(file.contents);
                     comboInfo.files.splice(index,1);
                  }
               }
           });

           this.emit('end');
       }

       return through(function (file) {

            if(!config) {
                kmd.config("modules",realDepMap);
                config = true;
            }
            if (file.isNull()) {
                this.push(file);
                return ;
            }

            if (file.isStream()) {
                return callback(uglifyError('Streaming not supported', {
                    fileName: file.path,
                    showStack: false
                }));
            }

            combo(file);

            buffer.push(file);

        },endStream);
    }
}
