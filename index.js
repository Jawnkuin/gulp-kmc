'use strict';

var kmc = require('kmc'),
    through = require('through2'),
    gutil = require('gulp-util'),
    fs = require('fs'),
    path = require('path'),
    os = require('os');


module.exports = function (options, settings) {
    settings = settings || {};
    options = options || {};
    settings.ext = typeof settings.ext === "undefined" ? ".html" : settings.ext;

    return through.obj(function (file, enc, cb) {
        if (file.isNull()) {
            this.push(file);
            return cb();
        }

        if (file.isStream()) {
            this.emit(
                'error',
                new gutil.PluginError('gulp-kmc', 'Streaming not supported')
            );
        }

        var depExt = options.depExt,
            depFilePath = options.depFilePath,
            comboOnly = options.comboOnly,
            depFileCharset = options.depFileCharset || options.charset,
            fixModuleName = options.fixModuleName === true,
            fixModuleNameOnDest = options.copyAssets === true,
            traverse = options.traverse;

        kmc.config(options);

        var results = [];
        this.files.forEach(function (f) {
            f.src.forEach(function(src){
                var depFile = '',
                    inputSrc = path.resolve(src),
                    outputSrc = path.resolve(String(f.dest));

                if(depExt || depFilePath){
                    depExt = depExt || '.dep';
                    var outputIsDir = grunt.file.isDir(outputSrc) || !/\.js$/.test(outputSrc);
                    if(depFilePath){
                        if(grunt.file.isDir(depFilePath) || !/.js$/.test(depFilePath)){
                            depFile = path.resolve(depFilePath, path.basename(outputIsDir ? path.basename(inputSrc, '.js') :outputSrc) + depExt + '.js');
                        }else{
                            depFile = depFilePath;
                        }
                    }else{
                        var dir = outputIsDir ? outputSrc : path.dirname(outputSrc);
                        depFile = path.resolve(dir, path.basename(inputSrc, '.js') + depExt + '.js');
                    }
                }
                var result = '';
                if(comboOnly === true){
                    var outputDir = grunt.file.isDir(outputSrc) ? outputSrc : path.dirname(outputSrc);
                    var r = kmc.combo(inputSrc, options.comboMap !== true ? depFile : undefined, depFileCharset, fixModuleName, true, fixModuleNameOnDest ? outputDir : null,comboOnly === true);
                    results.push(r);
                }else{
                    result = kmc.build(inputSrc, outputSrc, null, depFile, traverse);
                    results.push(result);
                }

            });
        });

        if(options.comboMap === true){
            var content = [];
            var writed = [];
            results.forEach(function(result){
                if(result.modules){
                    for(var modName in result.modules){
                        if(writed.indexOf(modName) === -1){
                            var mod = result.modules[modName];
                            var requires = [];
                            if(mod && mod.dependencies && mod.dependencies.length){
                                mod.dependencies.forEach(function(subMod){
                                    requires.push("'" + subMod.name + "'");
                                });
                                content.push("'" + modName + "': { requires: [" + requires.join(', ') + "]}");
                            }
                            writed.push(modName);
                        }
                    }
                }
            });
            var r = '/*generated by KMC*/' + os.EOL;
            if(content.length){
                r += "KISSY.config('modules', {" + os.EOL + " " + content.join("," + os.EOL + " ") + " " + os.EOL + "});";
            }
            file.contents = new Buffer(options.depFilePath, r, {'encoding':'utf8'});
            file.path = gutil.replaceExtension(file.path, ".js")
            //grunt.log.ok('combined dependency file ' + options.depFilePath + ' created.');
        }


        this.push(file);
        cb();
    });
};