'use strict';
var through = require('through'),
    gutil = require('gulp-util'),
    PluginError = gutil.PluginError,
    fs = require('fs'),
    path = require('path'),
	kmd = require('k2cmd');


var depMap = {},
    realDepMap = {},
    options = {},
    writeTimer = null;

function writeDepFile(filePath){
    var depFilePath = kmd.config("depFilePath");

    if(depFilePath){
        filePath = depFilePath;
    }
    if(!fs.existsSync(path.dirname(filePath))) {
        fs.mkdirSync(path.dirname(filePath));
    }
    var code ="/*generated by KMD*/\nKISSY.config('modules'," + JSON.stringify(depMap,null,4) +');'
    fs.writeFileSync(filePath,code);
    fs.writeFileSync(filePath.replace(/\.js$/,"-min.js"),kmd.minify(code));
    gutil.log('combined dependency file ' + gutil.colors.green(filePath) + ' is created.');
}

module.exports ={
    config: kmd.config,
    cmd2k: function(opt) {
        var buffer = [];

        options["cmd2k"] =opt||{};

	    function k2cmd(file) {

            /*jshint validthis:true */
            if (file.isNull()) {
                return;
            }

            if (file.isStream()) {
                return this.emit('error', new PluginError('gulp-kmc',  'Streaming not supported'));
            }

            var ignore = false;

            if(opt.exclude) {
                ignore = opt.exclude.some(function(item) {
                    return file.path.indexOf(item) > -1;
                });
            }

            if(ignore) {
                buffer.push(file);
                return;
            }

            file.realPath = file.path;
            var r = kmd.cmd2kissy2(file.contents.toString(), {
                                            filePath:file.path,
                                            fromFile:false,
                                            minify: opt.minify
                                        }),
                info = r.parser;

            if(info.depMods.length && !depMap[info.moduleName.moduleName]) {
                var requires = [],realRequires = [];
                info.depMods.forEach(function(dep) {
                    requires.push(dep.moduleName);
                    realRequires.push(dep.originalName);
                });
                realDepMap[info.moduleName.originalName] = { requires: realRequires };
                depMap[info.moduleName.moduleName] = { requires: requires };
            }

            if(opt.minify) {
                var ext = opt.ext || "-min.js";
                var filePath = file.path.replace(/\.js$/, ext);

                buffer.push(new gutil.File({
                    contents:new Buffer(r.code.minifyCode),
                    path:filePath,
                    base:file.base
                }));
            }

            try {
                file.contents = new Buffer(r.code.wrappedCode);
            } catch (e) {
                return callback({
                    fileName: file.path,
                    lineNumber: e.line,
                    stack: e.stack,
                    showStack: false
                });
            }

            buffer.push(file);

        }

        function endStream() {
            if (buffer.length === 0) return this.emit('end');
            var self = this;
            buffer.forEach(function(file){
                self.push(file);
            });

            if(opt.depFilePath) {
                writeDepFile(opt.depFilePath);
            }
            this.emit('end');

        }

	    return through(k2cmd, endStream);
    },

    combo: function(opt) {

       var combined = {},
           config = null;

       var buffer = [];

       options["combo"] =opt||{};

       function combo(_file, callback) {
            var combinedFile = [];

            if(combined[_file.path]) {
                return combinedFile;
            }

            if(opt && opt.files && opt.files.length) {
                opt.files.forEach(function(file){
                    if(path.resolve(file.src) == _file.path){
                       combined[_file.path] = {
                          files:[],
                          contents:[],
                          dest:file.dest
                       };

                       if(opt.minify) {
                           if(options["cmd2k"].minify) {
                                var ext = opt.ext || "-min.js",
                                   mPath = _file.path.replace(/\.js$/,ext);

                                combined[mPath] = {
                                  files:[],
                                  contents:[],
                                  minify:true,
                                  dest:file.dest.replace(/\.js$/,ext)
                                };
                           }else{
                               gutil.log(gutil.colors.red('build combined  file needs to set cmd2k task options.minify true!'));
                           }
                       }

                       kmd.comboAsync(_file.path, callback);
                    }
                });
            }
       }

       function endStream() {
           if (buffer.length === 0) return this.emit('end');
           var self = this;

           var minifyFile = {};
           buffer.forEach(function(file){
               self.push(file);

               for(var f in combined){
                  var comboInfo = combined[f],
                      index = comboInfo.files.indexOf(file.realPath);

                  if(index > -1) {
                     comboInfo.contents.push(file.contents);
                     comboInfo.files.splice(index,1);
                  }
               }
           });
           for(var f in combined){
               var comboInfo = combined[f];

               this.push(new gutil.File({
                    base:path.dirname(comboInfo.dest),
                    path:comboInfo.dest,
                    contents: new Buffer(comboInfo.contents.join(comboInfo.minify?"" : "\n"))
               }));
               gutil.log('combined  file ' + gutil.colors.green(comboInfo.dest) + ' is created.');
           }

           this.emit('end');
       }

       return through(function (file) {

            if(!config) {
                kmd.config("modules",realDepMap);
                config = true;
            }
            if (file.isNull()) {
                this.push(file);
                return ;
            }

            if (file.isStream()) {
                return callback(uglifyError('Streaming not supported', {
                    fileName: file.path,
                    showStack: false
                }));
            }

            combo(file, function(mods){
                var files = [],
                    minifyFiles = [],
                    modsName= [];

                mods.forEach(function(mod){
                    var url = path.resolve(mod.url);
                    files.push(url);
                    if(opt.minify && options["cmd2k"].minify) {
                        var ext = options["cmd2k"].ext || "-min.js";
                        minifyFiles.push(url.replace(/\.js$/,ext));
                    }
                    modsName.push(kmd.getMapModuleName(mod.name));
                });
                combined[file.path].files = files;

                if(opt.minify&&options["cmd2k"].minify) {
                   var ext = opt.ext || "-min.js",
                       mPath = file.path.replace(/\.js$/,ext);

                    combined[mPath].files = minifyFiles;
                }
                combined[file.path].contents.push("/*\ncombined files by KMD:\n" + modsName.join("\n")+"\n*/\n");
            });
            file.realPath = file.path;
            buffer.push(file);

        },endStream);
    }
}
